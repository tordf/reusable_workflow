name: Reusable python test workflow example

on:
  workflow_call:
    secrets:
      GCP_PROJECT_ID:
        required: true
      GCP_ARTIFACT_REGISTRY_URI:
        required: true
      GCP_DOCKER_REGISTRY:
        required: true
      GCP_SA_KEY:
        required: true
      GCP_ARTIFACT_REGISTRY_PYTHON_URI:
        required: true


      
    inputs:
      runs-on:
        description: Platform to execute on
        required: false
        type: string
        default: ubuntu-latest
  

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]

    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      ARTIFACT_REGISTRY: ${{ secrets.GCP_ARTIFACT_REGISTRY_URI }}
      DOCKER_REGISTRY: ${{ secrets.GCP_DOCKER_REGISTRY }}
      SA_KEY: ${{ secrets.GCP_SA_KEY }}
      GIT_TERMINAL_PROMPT: 0

    steps:
    - uses: actions/checkout@v2
    

    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v0'
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        #service_account_key: ${{ secrets.GCP_SA_KEY }}
        #export_default_credentials: true
    
    - name: Authenticate with GCR #quiet to not freeze.
      run: |
        gcloud auth configure-docker ${{ secrets.GCP_ARTIFACT_REGISTRY_URI }} --quiet
        gcloud config set artifacts/location europe-west1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.2.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      uses: 'tordf/poetry-install@v1.0'
      with:
        poetry-repository: ${{secrets.GCP_ARTIFACT_REGISTRY_PYTHON_URI}}/$PROJECT_ID/${DOCKER_REGISTRY}
      

    - name: Check codestyle
      uses: 'tordf/check_python@v1.0'

    - name: Run tests
      run: |
        coverage run -m pytest -v tests
        coverage xml

    - name: Create hash for Docker image
      run: echo "HASH=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV

    - name: Get service name from TOML file
      run: echo "SERVICE_NAME=$(sed -n -e 's/^.*name\s*=\s* //p' pyproject.toml | tr -d '"')" >> $GITHUB_ENV
    
    - name: Get package version from TOML file
      run: echo "VERSION=$(sed -n -e 's/^.*version\s*=\s* //p' pyproject.toml | tr -d '"')" >> $GITHUB_ENV

    - name: Build docker image
      run: |-
        docker build -f Dockerfile --progress plain --build-arg GOOGLE_APPLICATION_CREDENTIALS=$(echo $SA_KEY | base64 -w 0)  -t $ARTIFACT_REGISTRY/$PROJECT_ID/${DOCKER_REGISTRY}/$SERVICE_NAME:$HASH -t $ARTIFACT_REGISTRY/$PROJECT_ID/${DOCKER_REGISTRY}/$SERVICE_NAME:latest -t $ARTIFACT_REGISTRY/$PROJECT_ID/${DOCKER_REGISTRY}/$SERVICE_NAME:$VERSION .